#include<iostream>
#include<cassert>
#include<cstring>
#include<cmath>

using namespace std;

double const PI = 3.14;

class Figure
{
public:
	Figure();
	bool isItIn(Figure &);
	virtual double anotherArea(double, double, double, double, double, double);
	virtual double getR();
	virtual bool isTheDotInTheSquare(double, double);
	virtual void setR(double);
	virtual void setXA(double);
	virtual void setXB(double);
	virtual void setXC(double);
	virtual void setXD(double);
	virtual void setYA(double);
	virtual void setYB(double);
	virtual void setYC(double);
	virtual void setYD(double);
	virtual double getXA()const;
	virtual double getXB()const;
	virtual double getXC()const;
	virtual double getXD()const;
	virtual double getYA()const;
	virtual double getYB()const;
	virtual double getYC()const;
	virtual double getYD()const;
	virtual double Area()=0;
	virtual double Perimetre()=0;
	virtual void Print()=0;
	virtual char getType();

	virtual ~Figure();
private:
	double xA, xB, xC, xD, yA, yB, yC, yD;
};

Figure::Figure(){

}
double Figure::anotherArea(double, double, double, double, double, double){
	return 0;
}
bool Figure::isItIn(Figure &other){
	if (getType() == 't'){
		if (other.getType() == 's'){
			if (Area() == anotherArea(other.getXA(), other.getYA(), getXA(), getYA(), getXB(), getYB()) + anotherArea(getXC(), getYC(), other.getXA(), other.getYA(), getXB(), getYB()) + anotherArea(getXA(), getYA(), getXC(), getYC(), other.getXA(), other.getYA()))
			{
				if (Area() == anotherArea(other.getXB(), other.getYB(), getXA(), getYA(), getXB(), getYB()) + anotherArea(getXC(), getYC(), other.getXB(), other.getYB(), getXB(), getYB()) + anotherArea(getXA(), getYA(), getXC(), getYC(), other.getXB(), other.getYB()))
				{
					if (Area() == anotherArea(other.getXC(), other.getYC(), getXA(), getYA(), getXB(), getYB()) + anotherArea(getXC(), getYC(), other.getXC(), other.getYC(), getXB(), getYB()) + anotherArea(getXA(), getYA(), getXC(), getYC(), other.getXC(), other.getYC()))
					{
						if (Area() == anotherArea(other.getXD(), other.getYD(), getXA(), getYA(), getXB(), getYB()) + anotherArea(getXC(), getYC(), other.getXD(), other.getYD(), getXB(), getYB()) + anotherArea(getXA(), getYA(), getXC(), getYC(), other.getXD(), other.getYD())){
							cout << "Vutre e kvadratcheto ^-^";
							return true;
						}
					}
				}
			}
			cout << "It is not in :(" << endl;
			return false;
		}
		if (other.getType() == 't'){
			if (find(other.getR(), other.getXA(), other.getYA())){
				cout << "IN";
				return true;
			}
			else{
				cout << "NOT";
				return false;
			}
		}
		else
			return false;
	}

	if (getType() == 's'){
		if (other.getType() == 'c'){
				if (isTheDotInTheSquare(other.getXA(), other.getYA())){
					if (find(other.getR(), other.getXA(), other.getYA())){
						cout << "IN";
						return true;
					}
					else{
						cout << "not";
						return false;
					}
				}
				else{
					cout << "Not";
					return false;
				}
			}
		if (other.getType() == 't'){
			if (isTheDotInTheSquare(other.getXA(), other.getYA()) && isTheDotInTheSquare(other.getXB(), other.getYB()) && isTheDotInTheSquare(other.getXC(), other.getYC())){
				cout << "It is in";
				return true;
			}
			else{
				cout << "it is out";
				return false;
			}
		}
		else
			return false;
		}
	if (getType() == 'c'){
		if (other.getType() == 's'){
			double d;
			d = sqrt(pow((getXA() - other.getXA()), 2) + pow((getYA() - other.getYA()), 2));
			if (d <= getR()){
				d = sqrt(pow((getXA() - other.getXB()), 2) + pow((getYA() - other.getYB()), 2));
				if (d <= getR()){
					d = sqrt(pow((getXA() - other.getXC()), 2) + pow((getYA() - other.getYC()), 2));
					if (d <= getR()){
						d = sqrt(pow((getXA() - other.getXD()), 2) + pow((getYA() - other.getYD()), 2));
						if (d <= getR())
							return true;
					}
				}
			}
			return false;
		}
		if (other.getType() == 't'){
			double d;
			d = sqrt(pow((getXA() - other.getXA()), 2) + pow((getYA() - other.getYA()), 2));
			if (d <= getR()){
				d = sqrt(pow((getXA() - other.getXB()), 2) + pow((getYA() - other.getYB()), 2));
				if (d <= getR()){
					d = sqrt(pow((getXA() - other.getXC()), 2) + pow((getYA() - other.getYC()), 2));
					if (d <= getR())
						return true;
				}
			}
			return false;
		}
	}
}
bool Figure::isTheDotInTheSquare(double, double){
	return 0;
}
double Figure::getXA()const{
	return xA;
}
double Figure::getXB()const{
	return xB;
}
double Figure::getXC()const{
	return xC;
}
double Figure::getXD()const{
	return xD;
}
double Figure::getYA()const{
	return yA;
}
double Figure::getYB()const{
	return yB;
}
double Figure::getYC()const{
	return yC;
}
double Figure::getYD()const{
	return yD;
}



void Figure::setXA(double xA){
	this->xA = xA;
}
void Figure::setXB(double xB){
	this->xB = xB;
}
void Figure::setXC(double xC){
	this->xC = xC;
}
void Figure::setXD(double xD){
	this->xD = xD;
}
void Figure::setYA(double yA){
	this->yA = yA;
}
void Figure::setYB(double yB){
	this->yB = yB;
}
void Figure::setYC(double yC){
	this->yC = yC;
}
void Figure::setYD(double yD){
	this->yD = yD;
}

double Figure::Area(){
	return 0;
}
double Figure::Perimetre(){
	return 0;
}
void Figure::Print(){

}
Figure::~Figure()
{
}

class Circle :	public Figure
{
	char type = 'c';
	double r,xA,yA ;
public:
	double getR();
	char getType();
	void setR(double);
	void setXA(double);
	void setYA(double);
	double getXA()const;
	double getYA()const;

	Circle(double ,double,double);
	void Print();
	double Perimetre();
	double Area();
	~Circle();
};

Circle::Circle(double r, double xA, double yA)
{
	this->r = r;
	setXA(xA);
	setYA(yA);
}
char Circle::getType(){
	return type;
}
double Circle::getXA()const{
	return xA;
}
void Circle::setXA(double xA){
	this->xA = xA;
}
void Circle::setYA(double yA){
	this->yA = yA;
}
double Circle::getYA()const{
	return yA;
}
double Circle::getR(){
	return r;
}
void Circle::setR(double r){
	this->r = r;
}
void Circle::Print(){
	cout << "Circle Perimetur: " << Perimetre()
		<< "Lice: " << Area() << endl;
}
double Circle::Perimetre(){
	return 2 * PI*getR();
}
double Circle::Area(){
	return 2 * PI*getR();
}

Circle::~Circle()
{
}

class Square :	public Figure
{
public:
	Square(double = 7, double = 4, double = 29, double = 4, double = 29, double = 26, double = 7, double =26);
	bool isTheDotInTheSquare(double ,double);
	double anotherArea(double,double,double,double,double,double);
	double Area();
	void Print();
	double getAB();
	double getBC();
	double getCD();
	double getDA();
	double getOx();
	double getOy();
	double getDiagonal();
	double Perimetre();
	double radiusOfTheInscribed();
	double radiusOfTheDescribed();
	bool validation();
	double compareAndGetMin(double, double,double, double);
	double distanceFromPointToLine(double, double, double, double, double, double);
	bool find(double, double, double);
	~Square();

	void setXA(double);
	void setXB(double);
	void setXC(double);
	void setXD(double);
	void setYA(double);
	void setYB(double);
	void setYC(double);
	void setYD(double);
	double getXA()const;
	double getXB()const;
	double getXC()const;
	double getXD()const;
	double getYA()const;
	double getYB()const;
	double getYC()const;
	double getYD()const;
	char getType();
private:
	char type='s';
	double AB, BC, CD, DA, diagonal;
	double xR, yR;
	double xA, xB, xC, xD, yA, yB, yC, yD;
};

Square::Square(double xA, double yA, double xB, double yB, double xC, double yC,double xD,double yD){
	setXA(xA);
	setXB(xB);
	setXC(xC);
	setXD(xD);
	setYA(yA);
	setYB(yB);
	setYC(yC);
	setYD(yD);
}
char Square::getType(){
	return type;
}
double Square::getAB(){
	AB = sqrt((getXA() - getXB())*(getXA() - getXB()) + (getYA() - getYB())*(getYA() - getYB()));
	return AB;
}
double Square::getBC(){
	BC = sqrt((getXB() - getXC())*(getXB() - getXC()) + (getYB() - getYC())*(getYB() - getYC()));
	return BC;
}
double Square::getCD(){
	CD = sqrt((getXC() - getXD())*(getXC() - getXD()) + (getYC() - getYD())*(getYC() - getYD()));
	return CD;
}
double Square::getDA(){
	DA = sqrt((getXD() - getXA())*(getXD() - getXA()) + (getYD() - getYA())*(getYD() - getYA()));
	return DA;
}
double Square::anotherArea(double x1, double y1, double x2, double y2, double x3, double y3){
	return abs(((x1 - x3)*(y2 - y1)) - ((x1 - x2)*(y3 - y1)))*(0.5);
}
bool Square::isTheDotInTheSquare(double x, double y){
	if (Area() / 2 == (anotherArea(getXA(), getYA(), getXB(), getYB(), x, y) + anotherArea(getXB(), getYB(), getXC(), getYC(), x, y) + anotherArea(getXC(), getYC(), getXA(), getYA(), x, y))){
		return true;
	}
	else if (Area() / 2 == (anotherArea(getXC(), getYC(), getXD(), getYD(), x, y) + anotherArea(getXD(), getYD(), getXA(), getYA(), x, y) + anotherArea(getXA(), getYA(), getXC(), getYC(), x, y))){
		return true;
	}
	else{
		return false;
	}
}
bool Square::find(double r, double x, double y){
	double temp;

	temp = compareAndGetMin(distanceFromPointToLine(getXA(), getYA(), getXB(), getYB(), x, y), distanceFromPointToLine(getXB(), getYB(), getXC(), getYC(), x, y), distanceFromPointToLine(getXC(), getYC(), getXD(), getYD(), x, y), distanceFromPointToLine(getXD(), getYD(), getXA(), getYA(), x, y));
	if (temp < r)
		return false;
	else
		return true;
}
double Square::compareAndGetMin(double first, double second, double third, double fourth){
	if (first <= second && first <= third && first<=fourth)
		return first;
	else if (second <= first && second <= third && second <=fourth)
		return second;
	else if (third <= first && third <= second && third <= fourth)
		return third;
	else
		return fourth;
}
double Square::distanceFromPointToLine(double x1, double y1, double x2, double y2, double x0, double y0){
	double distance = 0;
	distance = abs((y2 - y1)*x0 - (x2 - x1)*y0 + x2*y1 - y2*x1) / sqrt(pow((y2 - y1), 2) + pow((x2 - x1), 2));
	return distance;
}
double Square::getDiagonal(){
	diagonal = (getXB() - getXD())*(getXB() - getXD()) + (getYB() - getYD())*(getYB() - getYD());
	return diagonal;
}
bool Square::validation(){
	if ((getDiagonal() == getAB()*getAB() + getDA()*getDA()) && (getAB()==getCD()) && (getBC()==getDA()))
		return true;
	else
		return false;
}
double Square::Perimetre(){
	return getAB() + getBC() + getCD() + getDA();
}
double Square::Area(){
	return getAB()*getBC();
}
double Square::radiusOfTheDescribed(){
	return (sqrt(getAB()*getAB() + getBC()*getBC()) / 2);
}
double Square::getOx(){
	return (getXA() + getXC()) / 2;
}
double Square::getOy(){
	return (getYA() + getYC()) / 2;
}
double Square::radiusOfTheInscribed(){
	if (getAB() == getBC())
		return AB;
	else{
		std::cout << "There can't be inscribed:";
		return 0;
	}
}
void Square::Print(){
	if (validation()){
		cout << "Square with " << endl
			<< "a: " << getAB() << endl
			<< "B: " << getBC() << endl
			<< "C: " << getCD() << endl
			<< "D: " << getDA() << endl
			<< "Area of :" << Area() << endl
			<< "Perimetre: " << Perimetre() << endl
			<< "Radius Of the inscribed: " << radiusOfTheInscribed() << endl
			<< "Radius of the described: " << radiusOfTheDescribed() << endl
			<<"Diagonal: "<<getDiagonal()<<endl;
	}
	else
		cout << "No such square"<<endl;
}
double Square::getXA()const{
	return xA;
}
double Square::getXB()const{
	return xB;
}
double Square::getXC()const{
	return xC;
}
double Square::getXD()const{
	return xD;
}
double Square::getYA()const{
	return yA;
}
double Square::getYB()const{
	return yB;
}
double Square::getYC()const{
	return yC;
}
double Square::getYD()const{
	return yD;
}
void Square::setXA(double xA){
	this->xA = xA;
}
void Square::setXB(double xB){
	this->xB = xB;
}
void Square::setXC(double xC){
	this->xC = xC;
}
void Square::setXD(double xD){
	this->xD = xD;
}
void Square::setYA(double yA){
	this->yA = yA;
}
void Square::setYB(double yB){
	this->yB = yB;
}
void Square::setYC(double yC){
	this->yC = yC;
}
void Square::setYD(double yD){
	this->yD = yD;
}

Square::~Square(){
}

class Triangle :  public Figure
{

public:
	Triangle(double=1,double=2,double=3,double=5,double=2,double=15);
	double firstHalf();
	double secondHalf();
	double compareAndGetMin(double, double, double);
	double distanceFromPointToLine(double,double,double,double,double,double);
	bool find(double ,double,double);
	double anotherArea(double, double, double, double, double, double);
	double Area();
	void Print();
	double getAB();
	double getAC();
	double getBC();
	double findOx();
	double findOy();
	double Perimetre();
	double radiusOfTheInscribed();
	double radiusOfTheDescribed();
	double getYA()const;
	double getYB()const;
	double getYC()const;
	void setYA(double);
	void setYB(double);
	void setYC(double);

	void setXA(double);
	void setXB(double);
	void setXC(double);
	double getXA()const;
	double getXB()const;
	char getType();
	double getXC()const;
	~Triangle();
private:
	char type = 't';
	double AB, AC, BC,Ox,Oy;
	double xA, xB, xC, yA, yB, yC;
};

Triangle::Triangle(double xA, double yA, double xB, double yB, double xC, double yC)
{
	setXA(xA);
	setXB(xB);
	setXC(xC);
	setYA(yA);
	setYB(yB);
	setYC(yC);
}
char Triangle::getType(){
	return type;
}
double Triangle::firstHalf(){
	return (getXA() - getXC())*(getYB() - getYA());
}
double Triangle::secondHalf(){
	return (getXA() - getXB())*(getYC() - getYA());
}
double Triangle::Area(){
	return (abs(firstHalf() - secondHalf())*(0.5));
}
double Triangle::getAB(){
	AB = sqrt((getXA() - getXB())*(getXA() - getXB()) + (getYA() - getYB())*(getYA() - getYB()));
	return AB;
}
double Triangle::getAC(){
	AC = sqrt((getXA() - getXC())*(getXA() - getXC()) + (getYA() - getYC())*(getYA() - getYC()));
	return AC;
}
double Triangle::getBC(){
	BC = sqrt((getXB() - getXC())*(getXB() - getXC()) + (getYB() - getYC())*(getYB() - getYC()));
	return BC;
}
double Triangle::Perimetre(){
	return getAB() + getAC() + getBC();
}
double Triangle::findOx(){
	Ox = getBC()*getXA() + getAC()*getXB() + getAB()*getXC();
	return Ox;
}
double Triangle::findOy(){
	Oy = getBC()*getYA() + getAC()*getYB() + getAB()*getYC();
	return Oy;
}
double Triangle::distanceFromPointToLine(double x1, double y1, double x2, double y2, double x0, double y0){
	double distance = 0;
	distance = abs((y2-y1)*x0-(x2-x1)*y0+x2*y1 -y2*x1)/sqrt(pow((y2-y1),2)+ pow((x2-x1),2));
	return distance;
}
double Triangle::compareAndGetMin(double first,double second,double third){
	if (first <= second && first <= third)
		return first;
	else if (second <= first && second <= third)
		return second;
	else
		return third;
}
bool Triangle::find(double r, double x, double y){
	double temp;
	temp = compareAndGetMin(distanceFromPointToLine(getXA(), getYA(), getXB(), getYB(), x, y), distanceFromPointToLine(getXB(), getYB(), getXC(), getYC(), x, y), distanceFromPointToLine(getXC(), getYC(), getXA(), getYA(), x, y));
	if (temp < r)
		return false;
	else
		return true;
}
double Triangle::anotherArea(double x1, double y1, double x2, double y2, double x3, double y3){
	return abs(((x1 - x3)*(y2 - y1)) - ((x1 - x2)*(y3 - y1)))*(0.5);
}
double Triangle::radiusOfTheInscribed(){
	return Area() / (Perimetre() / 2);
}
double Triangle::radiusOfTheDescribed(){
	return (Area() * 4) / (getAB()*getAC()*getBC());
}
void Triangle::Print(){
	cout << "Triangle with "<<endl
		<< "a: " << getBC() << endl
		<< "b:" << getAC() << endl
		<< "c: " << getAB() << endl
		<< "Area of :" << Area() << endl
		<< "Perimetre: " << Perimetre() << endl
		<< "OX: " << findOx() <<endl
		<< "OY: " << findOy() << endl
		<< "Radius Of the inscribed: " << radiusOfTheInscribed() << endl
		<< "Radius of the described: " << radiusOfTheDescribed()<<endl;
}
double Triangle::getXA()const{
	return xA;
}
double Triangle::getXB()const{
	return xB;
}
double Triangle::getXC()const{
	return xC;
}
double Triangle::getYA()const{
	return yA;
}
double Triangle::getYB()const{
	return yB;
}
double Triangle::getYC()const{
	return yC;
}

void Triangle::setXA(double xA){
	this->xA = xA;
}
void Triangle::setXB(double xB){
	this->xB = xB;
}
void Triangle::setXC(double xC){
	this->xC = xC;
}
void Triangle::setYA(double yA){
	this->yA = yA;
}
void Triangle::setYB(double yB){
	this->yB = yB;
}
void Triangle::setYC(double yC){
	this->yC = yC;
}
Triangle::~Triangle(){
}

int main()
{

}
